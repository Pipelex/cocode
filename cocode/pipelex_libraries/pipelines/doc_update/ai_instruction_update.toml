domain = "ai_instruction_update"
definition = "Pipeline for updating AI instruction files (AGENTS.md, CLAUDE.md, cursor rules) based on git diff"

[concept]
GitDiff = "A git diff output showing changes between two versions of a codebase"
AgentsContent = "Content of the AGENTS.md file"
ClaudeContent = "Content of the CLAUDE.md file"
CursorRulesContent = "Content of cursor rules files"
AIInstructionFileAnalysis = "Analysis of changes needed for a specific AI instruction file"
AIInstructionParallelResults = "Results from parallel analysis of AI instruction files"
AIInstructionUpdateSuggestions = "Comprehensive suggestions for updating all AI instruction files"

[pipe]

[pipe.analyze_agents_md_changes]
PipeLLM = "Analyze changes needed for AGENTS.md file"
inputs = { git_diff = "GitDiff", agents_content = "AgentsContent" }
output = "AIInstructionFileAnalysis"
system_prompt = """
You are an AI instruction expert specializing in AGENTS.md files.
Focus EXCLUSIVELY on extracting GENERAL CODING PRINCIPLES from changes, not specific implementations.
Look for patterns like "use custom exceptions" or "format validation errors" rather than specific method names or classes.
Filter out maintenance updates, version changes, and configuration tweaks that don't improve coding skills.
"""
prompt_template = """
Analyze changes needed for AGENTS.md based on git diff and current file content.

CRITICAL FOCUS: Extract GENERAL CODING PRINCIPLES from the changes, not specific implementation details.

GIT DIFF:
@git_diff

CURRENT AGENTS.MD CONTENT:
@agents_content

Look for GENERAL PATTERNS in the changes and extract the underlying principles:

**CODING PRINCIPLES TO EXTRACT:**
- Error handling patterns (e.g., "use custom exceptions", "format validation errors")
- Validation approaches (e.g., "implement fallback validation", "use model validation")
- Code organization patterns (e.g., "separate concerns", "use dependency injection")
- Testing methodologies (e.g., "test edge cases", "use mocking patterns")
- Performance practices (e.g., "optimize for common cases", "implement caching")

**THINK IN TERMS OF GENERAL RULES:**
- Instead of "use StuffContentValidationError", think "use custom exceptions"
- Instead of "use format_pydantic_validation_error", think "format validation errors consistently"
- Instead of "implement content_as method", think "implement type conversion with validation"
- Instead of "use ValidationError", think "leverage framework validation mechanisms"

**COMPLETELY IGNORE:**
- Specific class names, method names, or variable names
- Version number updates (v0.6.1 → v0.6.2, etc.)
- Configuration file changes that don't affect coding
- Documentation formatting or typo fixes
- Gitignore pattern updates
- Dependency version bumps without API changes

For each relevant PRINCIPLE, categorize as:
- **Additions**: New general coding principles to adopt
- **Deletions**: Removed general practices or deprecated approaches
- **Modifications**: Changed general coding principles or updated approaches
- **Minor Changes**: Small refinements to existing general guidelines

Focus on WHAT general principle the code change represents, not HOW it's specifically implemented.
"""

[pipe.analyze_claude_md_changes]
PipeLLM = "Analyze changes needed for CLAUDE.md file"
inputs = { git_diff = "GitDiff", claude_content = "ClaudeContent" }
output = "AIInstructionFileAnalysis"
system_prompt = """
You are an AI instruction expert specializing in CLAUDE.md files.
Focus EXCLUSIVELY on extracting GENERAL CODE GENERATION PRINCIPLES from changes, not specific implementations.
Look for patterns like "use custom exceptions" or "format validation errors" rather than specific method names or classes.
Filter out maintenance updates, version changes, and configuration tweaks that don't improve code quality.
"""
prompt_template = """
Analyze changes needed for CLAUDE.md based on git diff and current file content.

CRITICAL FOCUS: Extract GENERAL CODE GENERATION PRINCIPLES from the changes, not specific implementation details.

GIT DIFF:
@git_diff

CURRENT CLAUDE.MD CONTENT:
@claude_content

Look for GENERAL PATTERNS in the changes and extract the underlying principles:

**CODE GENERATION PRINCIPLES TO EXTRACT:**
- Error handling patterns (e.g., "use custom exceptions", "format validation errors")
- Validation approaches (e.g., "implement fallback validation", "use model validation")
- Code structure patterns (e.g., "separate concerns", "use dependency injection")
- Testing patterns (e.g., "test edge cases", "use mocking patterns")
- Performance patterns (e.g., "optimize for common cases", "implement caching")

**THINK IN TERMS OF GENERAL RULES:**
- Instead of "use StuffContentValidationError", think "use custom exceptions"
- Instead of "use format_pydantic_validation_error", think "format validation errors consistently"
- Instead of "implement content_as method", think "implement type conversion with validation"
- Instead of "use ValidationError", think "leverage framework validation mechanisms"

**COMPLETELY IGNORE:**
- Specific class names, method names, or variable names
- Version number updates (v0.6.1 → v0.6.2, etc.)
- Configuration file changes that don't affect code generation
- Documentation formatting or typo fixes
- Gitignore pattern updates
- Dependency version bumps without API changes

For each relevant PRINCIPLE, categorize as:
- **Additions**: New general code generation principles to adopt
- **Deletions**: Removed general practices or deprecated approaches
- **Modifications**: Changed general code generation principles or updated approaches
- **Minor Changes**: Small refinements to existing general guidelines

Focus on WHAT general principle the code change represents, not HOW it's specifically implemented.
"""

[pipe.analyze_cursor_rules_changes]
PipeLLM = "Analyze changes needed for cursor rules files"
inputs = { git_diff = "GitDiff", cursor_rules_content = "CursorRulesContent" }
output = "AIInstructionFileAnalysis"
system_prompt = """
You are an AI instruction expert specializing in cursor rules files.
Focus EXCLUSIVELY on extracting GENERAL CODING PRINCIPLES from changes, not specific implementations.
Look for patterns like "use custom exceptions" or "format validation errors" rather than specific method names or classes.
Filter out maintenance updates, version changes, and configuration tweaks that don't improve code quality.
"""
prompt_template = """
Analyze changes needed for cursor rules based on git diff and current file content.

CRITICAL FOCUS: Extract GENERAL CODING PRINCIPLES from the changes, not specific implementation details.

GIT DIFF:
@git_diff

CURRENT CURSOR RULES CONTENT:
@cursor_rules_content

Look for GENERAL PATTERNS in the changes and extract the underlying principles:

**CODING PRINCIPLES TO EXTRACT:**
- Error handling patterns (e.g., "use custom exceptions", "format validation errors")
- Validation approaches (e.g., "implement fallback validation", "use model validation")
- Code organization patterns (e.g., "separate concerns", "use dependency injection")
- Testing methodologies (e.g., "test edge cases", "use mocking patterns")
- Performance practices (e.g., "optimize for common cases", "implement caching")

**THINK IN TERMS OF GENERAL RULES:**
- Instead of "use StuffContentValidationError", think "use custom exceptions"
- Instead of "use format_pydantic_validation_error", think "format validation errors consistently"
- Instead of "implement content_as method", think "implement type conversion with validation"
- Instead of "use ValidationError", think "leverage framework validation mechanisms"

**COMPLETELY IGNORE:**
- Specific class names, method names, or variable names
- Version number updates (v0.6.1 → v0.6.2, etc.)
- Configuration file changes that don't affect coding practices
- Documentation formatting or typo fixes
- Gitignore pattern updates
- Dependency version bumps without API changes

For each relevant PRINCIPLE, categorize as:
- **Additions**: New general coding principles to adopt
- **Deletions**: Removed general practices or deprecated approaches
- **Modifications**: Changed general coding principles or updated approaches
- **Minor Changes**: Small refinements to existing general guidelines

Focus on WHAT general principle the code change represents, not HOW it's specifically implemented.
"""

[pipe.combine_ai_instruction_analyses]
PipeLLM = "Combine all AI instruction file analyses into comprehensive suggestions"
inputs = { agents_analysis = "AIInstructionFileAnalysis", claude_analysis = "AIInstructionFileAnalysis", cursor_analysis = "AIInstructionFileAnalysis" }
output = "AIInstructionUpdateSuggestions"
system_prompt = """
You are an AI instruction coordinator. Combine individual file analyses into comprehensive, actionable suggestions.
Generate clear, structured output that separates each file's requirements.
"""
prompt_template = """
Combine these AI instruction file analyses into comprehensive suggestions:

AGENTS.MD ANALYSIS:
@agents_analysis
CLAUDE.MD ANALYSIS:
@claude_analysis
CURSOR RULES ANALYSIS:
@cursor_analysis

Extract the individual analyses for each file type and create a comprehensive summary that:
1. Assigns each analysis to the correct file type
2. Provides an overall summary of all changes needed
3. Maintains clear separation between file types
4. Ensures all specific content is preserved

The output should be structured to clearly show what needs to be done for each file type.
"""

[pipe.format_ai_instruction_output]
PipeLLM = "Format AI instruction update suggestions into a clear, user-friendly text output"
inputs = { combined_suggestions = "AIInstructionUpdateSuggestions" }
output = "Text"
system_prompt = """
You are an expert technical writer specializing in AI instruction files.
Be HIGHLY SELECTIVE - only document changes that represent significant coding principles or patterns.
When a change IS important, be specific and detailed about the principle and its application.
Ignore minor tweaks, small improvements, or incremental changes that don't fundamentally change how developers should code.
"""
prompt_template = """
Format these AI instruction update suggestions into a clear, well-structured text output:

@combined_suggestions

Create a professional document with the following structure:

# AI INSTRUCTION FILES UPDATE SUGGESTIONS

I have made changes to my codebase and need you to update the AI instruction files accordingly.

**IMPORTANT NOTE:** Only include changes that represent SIGNIFICANT coding principles or patterns. Be specific and detailed about important changes, but completely ignore minor improvements.

## OVERALL SUMMARY
[Only mention changes that represent major shifts in coding approach or significant new patterns]

## AGENTS.md UPDATES
[Only include if there are SIGNIFICANT changes to development principles]

**Reasoning:** [Why this represents a major shift in how developers should approach coding]

**Additions:**
[List only MAJOR new principles with specific details about when and why to use them]

**Deletions:**
[List only MAJOR removed principles or deprecated approaches]

**Modifications:**
[List only MAJOR changes to existing principles with specific details]

**Minor Changes:**
[SKIP this section - don't document minor changes]

## CLAUDE.md UPDATES
[Only include if there are SIGNIFICANT changes to code generation principles]

**Reasoning:** [Why this represents a major shift in code generation approach]

**Additions:**
[List only MAJOR new code generation principles with specific guidance]

**Deletions:**
[List only MAJOR removed principles or deprecated approaches]

**Modifications:**
[List only MAJOR changes to existing principles with specific details]

**Minor Changes:**
[SKIP this section - don't document minor changes]

## CURSOR RULES UPDATES
[Only include if there are SIGNIFICANT changes to coding practices]

**Reasoning:** [Why this represents a major shift in coding practices]

**Additions:**
[List only MAJOR new coding principles with specific guidance on application]

**Deletions:**
[List only MAJOR removed principles or deprecated practices]

**Modifications:**
[List only MAJOR changes to existing principles with specific details]

**Minor Changes:**
[SKIP this section - don't document minor changes]

## NO UPDATES NEEDED
[Include this section if no changes represent significant shifts in coding principles]

IMPORTANT FORMATTING RULES:
- Only document changes that represent SIGNIFICANT shifts in coding approach
- Be specific and detailed about important changes (when/why/how to apply the principle)
- Completely ignore minor improvements, small tweaks, or incremental changes
- If a change doesn't fundamentally change how developers should code, don't mention it
- Focus on GAME-CHANGING principles, not minor improvements
- If no major changes exist, respond with: \"No AI instruction updates are needed. The changes are minor improvements that don't represent significant shifts in coding principles.\"
"""

[pipe.ai_instruction_update_parallel]
PipeParallel = "Analyze changes for all AI instruction files in parallel"
inputs = { git_diff = "GitDiff", agents_content = "AgentsContent", claude_content = "ClaudeContent", cursor_rules_content = "CursorRulesContent" }
output = "AIInstructionParallelResults"
parallels = [
    { pipe = "analyze_agents_md_changes", result = "agents_analysis" },
    { pipe = "analyze_claude_md_changes", result = "claude_analysis" },
    { pipe = "analyze_cursor_rules_changes", result = "cursor_analysis" }
]

[pipe.ai_instruction_update]
PipeSequence = "AI instruction update analysis with parallel file processing and formatting"
inputs = { git_diff = "GitDiff", agents_content = "AgentsContent", claude_content = "ClaudeContent", cursor_rules_content = "CursorRulesContent" }
output = "Text"
steps = [
    { pipe = "ai_instruction_update_parallel", result = "parallel_analyses" },
    { pipe = "combine_ai_instruction_analyses", result = "combined_suggestions" },
    { pipe = "format_ai_instruction_output", result = "ai_instruction_output" }
]

