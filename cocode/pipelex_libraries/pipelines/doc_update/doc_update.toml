domain = "doc_update"
definition = "Legacy pipeline for backward compatibility - use user_doc_update.toml or ai_instruction_update.toml instead"

[concept]
GitDiff = "A git diff output showing changes between two versions of a codebase"
DocsDirectoryItem = "A specific item that needs docs/ directory analysis"
DocumentationUpdateAnalysis = "Detailed analysis of what needs to be added, deleted, or changed in documentation"
UserDocumentationSuggestions = "Final suggestions for updating user documentation (docs/ directory)"

[pipe]

# Legacy pipeline - redirects to user documentation pipeline
[pipe.comprehensive_batch_doc_update]
PipeSequence = "Legacy comprehensive documentation update analysis (deprecated - use user_doc_update or ai_instruction_update instead)"
inputs = { git_diff = "GitDiff" }
output = "UserDocumentationSuggestions"
steps = [
    { pipe = "legacy_identify_user_docs_items", result = "docs_items" },
    { pipe = "legacy_analyze_user_docs_change", batch_over = "docs_items", batch_as = "change_item", result = "docs_analyses" },
    { pipe = "legacy_generate_user_documentation_suggestions", result = "user_suggestions" }
]

# Legacy pipes - kept for backward compatibility
[pipe.legacy_identify_user_docs_items]
PipeLLM = "Identify changes that affect user documentation in docs/ directory"
inputs = { git_diff = "GitDiff" }
output = "DocsDirectoryItem"
multiple_output = true
system_prompt = """
You are a conservative user documentation analyst. Only identify changes that CLEARLY require user documentation updates.
Focus ONLY on user-facing features, API changes, installation procedures, and usage instructions.
Be very selective - most internal changes don't need user documentation updates.
"""
prompt_template = """
Analyze this git diff to identify changes that need docs/ directory updates:

@git_diff

ONLY identify changes that clearly affect users, such as:
- New CLI commands or removed commands
- Changed command behavior or parameters
- New features users will interact with
- Installation/setup changes
- API changes that affect user code

EXCLUDE:
- Internal refactoring
- Test changes
- Implementation details
- Minor version bumps without feature changes
- Code reorganization that doesn't affect user interface
- AI-specific tools or workflows (these belong in AI instruction files)

For each change that needs user documentation, provide:
- File path where the change occurred
- Type of change (new feature, removed feature, changed behavior, etc.)
- Brief description of what changed
- Why users need to know about this

Be conservative - when in doubt, don't include it.
"""

[pipe.legacy_analyze_user_docs_change]
PipeLLM = "Analyze a single change for user documentation impact"
inputs = { change_item = "DocsDirectoryItem" }
output = "DocumentationUpdateAnalysis"
system_prompt = """
You are a technical documentation expert. Analyze code changes to determine what user documentation updates are needed.
Focus on user-facing features, API changes, installation procedures, and usage instructions.
For single-line changes, evaluate if they represent major functionality changes or minor updates.
"""
prompt_template = """
Analyze this code change for user documentation impact:

Code Change:
@change_item

Determine what user documentation updates are needed. For each update, specify:
- Type: "Addition", "Deletion", "Modification", or "Minor Change"
- File: exact documentation file path in docs/ directory
- Location: where in the file to make the change
- Content: exact content to add/modify/remove
- Reason: why this change is needed for users

**Evaluation criteria for single-line changes:**
- If it's a new feature, API endpoint, command, or significant behavior change → "Addition"/"Deletion"/"Modification"
- If it's a minor fix, refactoring, or internal change with minimal user impact → "Minor Change"

Focus only on docs/ directory files for user documentation.
"""

[pipe.legacy_generate_user_documentation_suggestions]
PipeLLM = "Generate final user documentation update suggestions"
inputs = { docs_analyses = "DocumentationUpdateAnalysis" }
output = "UserDocumentationSuggestions"
system_prompt = """
You are a user documentation coordinator. Generate clear, actionable suggestions for updating user documentation.
Focus only on docs/ directory updates. Be specific and practical.
"""
prompt_template = """
Generate user documentation update suggestions based on this analysis:

Documentation Analyses:
@docs_analyses

Generate output in this exact format:

I have made changes to my codebase and need you to update the user documentation accordingly. Here's what changed and what needs to be updated:

## USER DOCUMENTATION UPDATES (docs/ directory)

**Additions:**
[List significant additions here]

**Deletions:**
[List significant deletions here]

**Modifications:**
[List significant modifications here]

**Other minor changes:**
[List minor single-line changes that don't warrant separate categories]

Only include sections that have actual updates. Skip empty sections entirely.
Be specific about file paths, locations, and exact content needed.
"""

