domain = "doc_update"
definition = "Pipelines for analyzing git diffs and generating documentation update suggestions for different documentation types"

[concept]
GitDiff = "A git diff output showing changes between two versions of a codebase"
DocsDirectoryItem = "A specific item that needs docs/ directory analysis"
AgentsInstructionItem = "A specific item that needs AGENTS.md analysis"
ClaudeInstructionItem = "A specific item that needs CLAUDE.md analysis"
CursorRulesItem = "A specific item that needs cursor rules analysis"
DocumentationUpdateAnalysis = "Detailed analysis of what needs to be added, deleted, or changed in documentation"
DocumentationUpdateSuggestions = "Final suggestions for updating documentation"

[pipe]

# Identification pipes - analyze git diff to identify what needs documentation updates
[pipe.identify_docs_directory_items]
PipeLLM = "Identify changes that affect docs/ directory documentation"
inputs = { git_diff = "GitDiff" }
output = "DocsDirectoryItem"
multiple_output = true
llm = "llm_for_large_text"
system_prompt = """
You are a conservative documentation analyst. Only identify changes that CLEARLY require user documentation updates.
Focus ONLY on user-facing features, API changes, installation procedures, and usage instructions.
Be very selective - most internal changes don't need documentation updates.
"""
prompt_template = """
Analyze this git diff to identify changes that need docs/ directory updates:

@git_diff

ONLY identify changes that clearly affect users, such as:
- New CLI commands or removed commands
- Changed command behavior or parameters
- New features users will interact with
- Installation/setup changes
- API changes that affect user code

EXCLUDE:
- Internal refactoring
- Test changes
- Implementation details
- Minor version bumps without feature changes
- Code reorganization that doesn't affect user interface

For each change that needs documentation, provide:
- File path where the change occurred
- Type of change (new feature, removed feature, changed behavior, etc.)
- Brief description of what changed
- Why users need to know about this

Be conservative - when in doubt, don't include it.
"""

[pipe.identify_agents_instruction_items]
PipeLLM = "Identify changes that affect AGENTS.md AI instructions"
inputs = { git_diff = "GitDiff" }
output = "AgentsInstructionItem"
multiple_output = true
llm = "llm_for_large_text"
system_prompt = """
You are a very conservative AI instruction analyst. Only identify changes that FUNDAMENTALLY affect how AI agents work with the codebase.
Focus ONLY on major architectural changes, new AI-specific tools, or significant workflow changes.
Most CLI changes or feature updates do NOT need AGENTS.md updates.
"""
prompt_template = """
Analyze this git diff to identify changes that need AGENTS.md instruction updates:

@git_diff

ONLY identify changes that fundamentally affect AI agent workflows, such as:
- New AI-specific commands or tools
- Major architectural changes affecting how agents navigate code
- New agent capabilities or integrations
- Significant changes to development workflows

EXCLUDE:
- Simple CLI command changes
- Feature additions that don't affect agent workflows
- Version updates
- Removed functionality that agents weren't using
- Internal refactoring

For each change that truly affects AI agents, provide:
- File path where the change occurred
- Type of change (new AI tool, workflow change, etc.)
- Brief description of what changed
- How this fundamentally changes AI agent workflows

Be very conservative - most changes don't need AGENTS.md updates.
"""

[pipe.identify_claude_instruction_items]
PipeLLM = "Identify changes that affect CLAUDE.md AI instructions"
inputs = { git_diff = "GitDiff" }
output = "ClaudeInstructionItem"
multiple_output = true
llm = "llm_for_large_text"
system_prompt = """
You are a very conservative Claude instruction analyst. Only identify changes that FUNDAMENTALLY affect how Claude understands or works with the codebase.
Focus ONLY on major architectural changes or new Claude-specific patterns.
Most CLI changes or feature updates do NOT need CLAUDE.md updates.
"""
prompt_template = """
Analyze this git diff to identify changes that need CLAUDE.md instruction updates:

@git_diff

ONLY identify changes that fundamentally affect Claude's understanding, such as:
- Major architectural or pattern changes
- New Claude-specific integrations or capabilities
- Significant changes to codebase structure or conventions
- New development paradigms Claude needs to understand

EXCLUDE:
- Simple CLI command changes
- Feature additions that don't change code patterns
- Version updates
- Removed functionality that doesn't affect Claude's understanding
- Internal refactoring

For each change that truly affects Claude's understanding, provide:
- File path where the change occurred
- Type of change (new pattern, architectural change, etc.)
- Brief description of what changed
- How this fundamentally changes Claude's understanding

Be very conservative - most changes don't need CLAUDE.md updates.
"""

[pipe.identify_cursor_rules_items]
PipeLLM = "Identify changes that affect cursor rules"
inputs = { git_diff = "GitDiff" }
output = "CursorRulesItem"
multiple_output = true
llm = "llm_for_large_text"
system_prompt = """
You are a very conservative Cursor rules analyst. Only identify changes that FUNDAMENTALLY affect coding patterns or project structure.
Focus ONLY on major changes to coding standards, project structure, or development workflows.
Most CLI changes or feature updates do NOT need cursor rules updates.
"""
prompt_template = """
Analyze this git diff to identify changes that need cursor rules updates:

@git_diff

ONLY identify changes that fundamentally affect Cursor's behavior, such as:
- New coding patterns or conventions
- Major project structure changes
- New development tools or workflows that affect coding
- Significant changes to code style or formatting requirements

EXCLUDE:
- Simple CLI command changes
- Feature additions that don't change coding patterns
- Version updates
- Internal changes that don't affect how code should be written
- Removed functionality that doesn't change coding standards

For each change that truly affects Cursor's coding behavior, provide:
- File path where the change occurred
- Type of change (new pattern, structure change, etc.)
- Brief description of what changed
- How this fundamentally changes how Cursor should code

Be very conservative - most changes don't need cursor rules updates.
"""

# Analysis pipes for each documentation type
[pipe.analyze_single_docs_change]
PipeLLM = "Analyze a single docs directory change for user documentation impact"
inputs = { change_item = "DocsDirectoryItem" }
output = "DocumentationUpdateAnalysis"
llm = "llm_for_large_text"
system_prompt = """
You are a technical documentation expert. Analyze code changes to determine what user documentation updates are needed.
Focus on user-facing features, API changes, installation procedures, and usage instructions.
For single-line changes, evaluate if they represent major functionality changes or minor updates.
"""
prompt_template = """
Analyze this code change for documentation impact:

Code Change:
@change_item

Determine what documentation updates are needed. For each update, specify:
- Type: "Addition", "Deletion", "Modification", or "Minor Change"
- File: exact documentation file path
- Location: where in the file to make the change
- Content: exact content to add/modify/remove
- Reason: why this change is needed

**Evaluation criteria for single-line changes:**
- If it's a new feature, API endpoint, command, or significant behavior change → "Addition"/"Deletion"/"Modification"
- If it's a minor fix, refactoring, or internal change with minimal user impact → "Minor Change"

Focus only on docs/ directory files for user documentation.
"""

[pipe.analyze_single_agents_instruction]
PipeLLM = "Analyze a single change for AGENTS.md AI instruction impact"
inputs = { change_item = "AgentsInstructionItem" }
output = "DocumentationUpdateAnalysis"
llm = "llm_for_large_text"
system_prompt = """
You are an AI agent instruction expert. Analyze code changes to determine what AI agent instructions need updating.
Focus on how AI agents can use new features, commands, functions, or workflows.
For single-line changes, evaluate if they represent major functionality changes or minor updates.
"""
prompt_template = """
Analyze this code change for AI agent instruction impact:

Code Change:
@change_item

Determine what AGENTS.md instruction updates are needed. For each update, specify:
- Type: "Addition", "Deletion", "Modification", or "Minor Change"
- File: AGENTS.md
- Location: which section to update
- Content: exact instructions for AI agents
- Reason: how this helps AI agents use the new functionality

**Evaluation criteria for single-line changes:**
- If it adds/removes/changes AI-usable functionality, commands, or workflows → "Addition"/"Deletion"/"Modification"
- If it's internal refactoring with no AI workflow impact → "Minor Change"

Focus on actionable instructions for AI agents.
"""

[pipe.analyze_single_claude_instruction]
PipeLLM = "Analyze a single change for CLAUDE.md AI instruction impact"
inputs = { change_item = "ClaudeInstructionItem" }
output = "DocumentationUpdateAnalysis"
llm = "llm_for_large_text"
system_prompt = """
You are a Claude AI instruction expert. Analyze code changes to determine what Claude-specific instructions need updating.
Focus on how Claude can use new features, understand new patterns, or follow new workflows.
For single-line changes, evaluate if they represent major functionality changes or minor updates.
"""
prompt_template = """
Analyze this code change for Claude AI instruction impact:

Code Change:
@change_item

Determine what CLAUDE.md instruction updates are needed. For each update, specify:
- Type: "Addition", "Deletion", "Modification", or "Minor Change"
- File: CLAUDE.md
- Location: which section to update
- Content: exact instructions for Claude AI
- Reason: how this helps Claude understand/use the new functionality

**Evaluation criteria for single-line changes:**
- If it affects Claude's understanding of codebase patterns, usage, or capabilities → "Addition"/"Deletion"/"Modification"
- If it's minor internal change with no Claude workflow impact → "Minor Change"

Focus on Claude-specific guidance and understanding.
"""

[pipe.analyze_single_cursor_rules]
PipeLLM = "Analyze a single change for cursor rules impact"
inputs = { change_item = "CursorRulesItem" }
output = "DocumentationUpdateAnalysis"
llm = "llm_for_large_text"
system_prompt = """
You are a Cursor AI configuration expert. Analyze code changes to determine what cursor rules need updating.
Focus on how Cursor should behave, what patterns to follow, and configuration changes.
For single-line changes, evaluate if they represent major functionality changes or minor updates.
"""
prompt_template = """
Analyze this code change for Cursor rules impact:

Code Change:
@change_item

Determine what cursor rules updates are needed. For each update, specify:
- Type: "Addition", "Deletion", "Modification", or "Minor Change"
- File: cursor rules file path
- Location: which rule section to update
- Content: exact rule updates for Cursor
- Reason: how this helps Cursor behave correctly

**Evaluation criteria for single-line changes:**
- If it affects Cursor's behavior patterns, coding standards, or configuration → "Addition"/"Deletion"/"Modification"
- If it's minor change with no Cursor behavior impact → "Minor Change"

Focus on Cursor-specific configuration and behavior rules.
"""

# Final consolidation pipe
[pipe.generate_final_documentation_suggestions]
PipeLLM = "Generate final documentation update suggestions with proper categorization"
inputs = { docs_analyses = "DocumentationUpdateAnalysis", agents_analyses = "DocumentationUpdateAnalysis", claude_analyses = "DocumentationUpdateAnalysis", cursor_analyses = "DocumentationUpdateAnalysis" }
output = "DocumentationUpdateSuggestions"
llm = "llm_for_swe"
system_prompt = """
You are a conservative documentation coordinator. Consolidate all documentation analyses into a clear, actionable format.
Be very selective - only include sections that have actual, meaningful updates.
Group changes by type and evaluate if single-line changes should be in main categories or "Other minor changes".
Skip entire sections if they have no meaningful updates.
"""
prompt_template = """
Consolidate these documentation analyses into final suggestions:

Docs Directory Analyses:
@docs_analyses

Agents Instruction Analyses:
@agents_analyses

Claude Instruction Analyses:
@claude_analyses

Cursor Rules Analyses:
@cursor_analyses

Generate output in this exact format:

I have made changes to my codebase and need you to update the documentation accordingly. Here's what changed and what needs to be updated:

## DOCS/ DIRECTORY UPDATES (User Documentation)

**Additions:**
[List significant additions here]

**Deletions:**
[List significant deletions here]

**Modifications:**
[List significant modifications here]

**Other minor changes:**
[List minor single-line changes that don't warrant separate categories]

## AGENTS.MD UPDATES (AI Agent Instructions)

**Additions:**
[List significant additions here]

**Deletions:**
[List significant deletions here]

**Modifications:**
[List significant modifications here]

**Other minor changes:**
[List minor single-line changes that don't warrant separate categories]

## CLAUDE.MD UPDATES (Claude AI Instructions)

**Additions:**
[List significant additions here]

**Deletions:**
[List significant deletions here]

**Modifications:**
[List significant modifications here]

**Other minor changes:**
[List minor single-line changes that don't warrant separate categories]

## CURSOR RULES UPDATES (Cursor AI Configuration)

**Additions:**
[List significant additions here]

**Deletions:**
[List significant deletions here]

**Modifications:**
[List significant modifications here]

**Other minor changes:**
[List minor single-line changes that don't warrant separate categories]

Only include sections that have actual updates. Skip empty sections entirely.
"""

# Main pipeline sequence
[pipe.comprehensive_batch_doc_update]
PipeSequence = "Comprehensive batch documentation update analysis using parallel processing"
inputs = { git_diff = "GitDiff" }
output = "DocumentationUpdateSuggestions"
steps = [
    { pipe = "identify_docs_directory_items", result = "docs_items" },
    { pipe = "identify_agents_instruction_items", result = "agents_items" },
    { pipe = "identify_claude_instruction_items", result = "claude_items" },
    { pipe = "identify_cursor_rules_items", result = "cursor_items" },
    { pipe = "analyze_single_docs_change", batch_over = "docs_items", batch_as = "change_item", result = "docs_analyses" },
    { pipe = "analyze_single_agents_instruction", batch_over = "agents_items", batch_as = "change_item", result = "agents_analyses" },
    { pipe = "analyze_single_claude_instruction", batch_over = "claude_items", batch_as = "change_item", result = "claude_analyses" },
    { pipe = "analyze_single_cursor_rules", batch_over = "cursor_items", batch_as = "change_item", result = "cursor_analyses" },
    { pipe = "generate_final_documentation_suggestions", result = "final_suggestions" }
]

