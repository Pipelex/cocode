domain = "doc_proofread"
definition = "Systematically proofread documentation against actual codebase to find inconsistencies using chunking"

[concept]
DocumentationFile = "A documentation file that needs to be proofread against the codebase"
RelatedCodeFile = "A code file that is related to a documentation file"
FilePath = "A path to a file in the codebase"
CodeFileContent = "Content of a specific code file extracted from the codebase"
DocumentationInconsistency = "An inconsistency found between documentation and actual code"

[pipe]

[pipe.list_docs_dir_files]
PipeFunc = "List all documentation files in the docs directory"
inputs = { repo_text = "Text" }
output = "FilePath"
function_name = "list_docs_dir_files"

[pipe.read_doc_file]
PipeFunc = "Read the content of a documentation file"
inputs = { file_path = "FilePath" }
output = "DocumentationFile"
function_name = "read_file_content"

[pipe.find_related_code_files]
PipeLLM = "Find code files that implement or use elements mentioned in docs"
inputs = { doc_file = "DocumentationFile", repo_text = "Text" }
output = "FilePath"
multiple_output = true
llm = "llm_for_large_text"
system_prompt = """
Extract code elements mentioned in docs (classes, functions, commands) and find their actual implementations or usages in the codebase.
"""
prompt_template = """
Find files that implement or use code elements from this documentation:

@doc_file

Available files in repo:
@repo_text

For each relevant file found:
- File path
- What code elements it contains (class/function/command name)
- Whether it implements or uses these elements

Only include files with actual code evidence, not just similar names or concepts.
"""

[pipe.proofread_single_doc]
PipeLLM = "Find major inconsistencies between docs and code"
inputs = { doc_file = "DocumentationFile", related_files = "FilePath" }
output = "DocumentationInconsistency"
multiple_output = true
llm = "llm_for_swe"
system_prompt = """
Find MAJOR inconsistencies between documentation and code that would cause user code to fail.
Only report issues that would completely break functionality or lead users down the wrong path.
"""
prompt_template = """
Find critical problems between these docs and code:

@doc_file

CODE:
@related_files

Look for things that would BREAK user code, like:
- Completely wrong function/class signatures
- Required parameters marked as optional (or vice versa)
- Fundamentally incorrect examples
- Wrong import paths that would fail
- Critically wrong types that would crash

For each major issue:
- Show what's wrong
- Show what's actually in the code
- Explain why it would break things

Skip anything that's not a showstopper. If it would just be confusing but still work, ignore it.
"""

[pipe.proofread_doc_sequence]
PipeSequence = "Process a single documentation file to find inconsistencies"
inputs = { doc_file = "DocumentationFile", repo_text = "Text" }
output = "DocumentationInconsistency"
steps = [
    { pipe = "find_related_code_files", result = "related_files" },
    { pipe = "proofread_single_doc", result = "inconsistencies" }
]

[pipe.doc_proofread]
PipeSequence = "Complete documentation proofreading pipeline"
inputs = { repo_text = "Text" }
output = "DocumentationInconsistency"
steps = [
    { pipe = "list_docs_dir_files", result = "doc_file_paths" },
    { pipe = "read_doc_file", batch_over = "doc_file_paths", batch_as = "file_path", result = "doc_files" },
    { pipe = "proofread_doc_sequence", batch_over = "doc_files", batch_as = "doc_file", result = "all_inconsistencies" }
]

